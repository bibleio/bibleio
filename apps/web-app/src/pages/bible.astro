---
export const prerender = false;

import { ControlBar } from "~/components/bible/ControlBar";
import Layout from "~/layouts/Layout.astro";
import type { TranslationBookChapter } from "~/types/chapter";
import { LinearBlur } from "progressive-blur";
import { formatChapterContent } from "~/utils/FormatVerses";

// Check if all URL parameters are present
const urlTranslation = Astro.url.searchParams.get("translation");
const urlBook = Astro.url.searchParams.get("book");
const urlChapter = Astro.url.searchParams.get("chapter");
const hasAllParams = urlTranslation && urlBook && urlChapter;

// We'll pass URL parameters to the frontend
const urlParams = {
  translation: urlTranslation,
  book: urlBook,
  chapter: urlChapter
};

// Only fetch data if we have all the parameters
let data: TranslationBookChapter | null = null;
let chapterContent: string[] = [];

if (hasAllParams) {
  try {
    const response = await fetch(
      `https://bible.helloao.org/api/${urlTranslation}/${urlBook}/${urlChapter}.json`
    );
    data = await response.json();
    chapterContent = formatChapterContent(data);
    console.log("Successfully loaded chapter data");
  } catch (error) {
    console.error("Error loading chapter data:", error);
  }
}

// Pass the flag to the frontend
const isInitialLoad = !hasAllParams;
---

<Layout title="Bible">
  <section id="main" class="flex h-screen flex-col items-center pt-72">
    <div
      id="container"
      class="flex h-full w-full max-w-[32rem] flex-col gap-24"
    >
      {
        isInitialLoad ? (
          <div id="loading-placeholder" class="text-center">
            <h3 class="text-body motion-preset-fade-lg motion-delay-0">
              Loading your Bible...
            </h3>
          </div>
        ) : data && data.book && data.chapter ? (
          <>
            <h3 class="text-h3 motion-preset-fade-lg motion-delay-0">
              {data.book.commonName} {data.chapter.number}
            </h3>
            <article
              class="bible-content motion-preset-fade-lg motion-delay-100 pb-128"
              set:html={chapterContent}
            />
          </>
        ) : (
          <h3 class="text-body text-yellow-reversed">
            Please select a translation, book, and chapter.
          </h3>
        )
      }
    </div>
    <ControlBar client:load urlParams={urlParams} />
    <LinearBlur
      className="fixed bottom-0 z-20 h-[6rem] w-screen"
      side="bottom"
      steps={8}
      strength={2}
      falloffPercentage={100}
    />
  </section>
</Layout>

<script>
  // This script runs on the client-side after hydration
    document.addEventListener("DOMContentLoaded", () => {
      // Import the store dynamically (only works on client side)
      import("~/stores/bibleStore").then(({ useBibleStore }) => {
        // Get the loading placeholder
        const loadingElement = document.getElementById("loading-placeholder");

        // Get current URL parameters
        const url = new URL(window.location.href);
        const urlTranslation = url.searchParams.get("translation");
        const urlBook = url.searchParams.get("book");
        const urlChapter = url.searchParams.get("chapter");
      
        // Only proceed if we're in initial loading state (missing parameters)
        if (loadingElement) {
          try {
            // Get stored values from localStorage directly
            const storeData = localStorage.getItem("bible-store");
            let parsedData;

            if (storeData) {
              parsedData = JSON.parse(storeData);
            }

            // Try to get stored values
            let translation = parsedData?.state?.translation || "BSB";
            let book = parsedData?.state?.book || "MAT";
            let chapter = parsedData?.state?.chapter || "1";

            console.log("Using stored values:", { translation, book, chapter });

            // Update URL with stored values
            url.searchParams.set("translation", translation);
            url.searchParams.set("book", book);
            url.searchParams.set("chapter", chapter);

            // Redirect to the URL with parameters (this will trigger a fetch)
            window.location.href = url.toString();
          } catch (error) {
            console.error("Error retrieving Bible preferences:", error);

            // In case of error, redirect to defaults
            url.searchParams.set("translation", "BSB");
            url.searchParams.set("book", "MAT");
            url.searchParams.set("chapter", "1");

            window.location.href = url.toString();
          }
        } else {
          // We have URL parameters - sync them to the store
          if (urlTranslation && urlBook && urlChapter) {
            const bibleStore = useBibleStore.getState();
          
            // Only update store if values are different
            if (bibleStore.translation !== urlTranslation || 
                bibleStore.book !== urlBook || 
                bibleStore.chapter !== urlChapter) {
              console.log("Updating store with URL parameters:", { urlTranslation, urlBook, urlChapter });
              bibleStore.setAll(urlTranslation, urlBook, urlChapter);
            }
          }
        }
      }).catch(err => {
        console.error("Error importing store:", err);
      });
    });
</script>
