---
import "~/styles/global.css";
import "@fontsource/lora/400.css";
import "@fontsource/lora/500.css";
import "@fontsource/lora/600.css";
import "@fontsource/lora/700.css";
import "@fontsource/lora/400-italic.css";
import "@fontsource/lora/500-italic.css";
import "@fontsource/lora/600-italic.css";
import "@fontsource/lora/700-italic.css";
import "@fontsource/jetbrains-mono/400.css";
import { Nav } from "~/components/Nav";
import { ThemeSwitcher } from "@bibleio/design";

const { title } = Astro.props;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />

    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="icon" type="image/png" href="/favicon.png" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />

    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <title>{title} | Bibleio App</title>
    <script is:inline>
      const theme = (() => {
        if (
          typeof localStorage !== "undefined" &&
          localStorage.getItem("theme")
        ) {
          return localStorage.getItem("theme");
        }
        if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
          return "dark";
        }
        return "light";
      })();

      if (theme === "light") {
        document.documentElement.classList.remove("dark");
      } else {
        document.documentElement.classList.add("dark");
      }

      window.localStorage.setItem("theme", theme);
    </script>
    <script is:inline>
      // Apply settings CSS variables immediately
      try {
        if (typeof localStorage === 'undefined') {
          console.warn('localStorage not available, skipping settings initialization');
          return;
        }

        const settingsData = localStorage.getItem('settings-store');
        if (!settingsData) {
          console.info('No settings found in localStorage, using defaults');
          return;
        }

        const data = JSON.parse(settingsData);
        if (!data || !data.state) {
          console.warn('Invalid settings data structure:', data);
          return;
        }

        const redWordsOfJesus = data.state.redWordsOfJesus ?? true;
        const textSize = data.state.textSize ?? 25;
        const lineHeight = data.state.lineHeight ?? 50;

        // Validate settings values
        if (typeof redWordsOfJesus !== 'boolean') {
          console.warn('Invalid redWordsOfJesus value:', redWordsOfJesus);
        }
        if (typeof textSize !== 'number' || textSize < 0 || textSize > 100) {
          console.warn('Invalid textSize value:', textSize);
        }
        if (typeof lineHeight !== 'number' || lineHeight < 0 || lineHeight > 100) {
          console.warn('Invalid lineHeight value:', lineHeight);
        }

        // Apply red words of Jesus setting
        if (!redWordsOfJesus) {
          document.documentElement.style.setProperty('--words-of-jesus-color', 'var(--color-text)');
        }

        // Apply text size
        const multiplier = 0.8 + (Math.min(Math.max(textSize, 0), 100) / 100) * 0.7;
        document.documentElement.style.setProperty('--bible-text-size', `${0.95 * multiplier}rem`);
        document.documentElement.style.setProperty('--bible-heading-size', `${1.1875 * multiplier}rem`);
        document.documentElement.style.setProperty('--bible-subtitle-size', `${0.875 * multiplier}rem`);

        // Apply line height
        const clampedLineHeight = Math.min(Math.max(lineHeight, 0), 100);
        const lineHeightPercent = 150 + (clampedLineHeight / 100) * 140;
        document.documentElement.style.setProperty('--bible-line-height', `${lineHeightPercent}%`);

        console.info('Settings applied:', { redWordsOfJesus, textSize, lineHeight });

      } catch (e) {
        console.error('Failed to initialize settings:', e);
        if (e instanceof SyntaxError) {
          console.error('Invalid JSON in settings-store, clearing corrupt data');
          try {
            localStorage.removeItem('settings-store');
          } catch (clearError) {
            console.error('Failed to clear corrupt settings:', clearError);
          }
        }
      }
    </script>
  </head>
  <body class="bg-bg-1 text-text overflow-x-hidden font-serif">
    <Nav path={Astro.url.pathname} client:load client:only="react" />
    <slot />
  </body>
</html>
